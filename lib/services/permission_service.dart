import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'native_background_service.dart';

class PermissionService {
  static const String _firstLaunchKey = 'guardian_first_launch';
  
  /// Verifica si es la primera vez que se ejecuta la aplicaci√≥n
  static Future<bool> _isFirstLaunch() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_firstLaunchKey) ?? true;
  }
  
  /// Marca que la aplicaci√≥n ya se ha ejecutado por primera vez
  static Future<void> _markFirstLaunchComplete() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_firstLaunchKey, false);
  }

  /// Solicita solo los permisos esenciales en la primera ejecuci√≥n
  /// Primero optimizaci√≥n de bater√≠a, luego notificaciones
  static Future<void> requestAllPermissionsOnFirstLaunch() async {
    final isFirstLaunch = await _isFirstLaunch();
    if (!isFirstLaunch) {
      print('üîê Not first launch, skipping permission requests');
      return;
    }
    
    print('üîê First launch detected - Requesting battery optimization first...');
    
    try {
      // 1. Optimizaci√≥n de bater√≠a (primero)
      if (Platform.isAndroid) {
        print('üîê Requesting battery optimization exemption...');
        try {
          await NativeBackgroundService.requestBatteryOptimizationExemption();
          print('üîã Battery optimization exemption requested');
        } catch (e) {
          print('‚ö†Ô∏è Battery optimization request failed: $e');
        }
      }
      
      // 2. Notificaciones (despu√©s)
      print('üîê Requesting notification permission...');
      final notificationStatus = await Permission.notification.request();
      print('üì± Notification permission status: $notificationStatus');
      
      // Marcar que ya se ha ejecutado por primera vez
      await _markFirstLaunchComplete();
      print('‚úÖ First launch permissions completed');
      
    } catch (e) {
      print('‚ùå Error during permission requests: $e');
      await _markFirstLaunchComplete();
    }
  }

  /// Verifica si los permisos esenciales est√°n concedidos (solo notificaciones inicialmente)
  static Future<bool> essentialPermissionsGranted() async {
    final notif = await Permission.notification.isGranted;
    
    // Por ahora solo verificamos notificaciones
    // La optimizaci√≥n de bater√≠a se verificar√° despu√©s
    return notif;
  }

  /// Verifica si todos los permisos necesarios est√°n concedidos
  static Future<bool> allPermissionsGranted() async {
    final notif = await Permission.notification.isGranted;
    final loc = await Permission.locationWhenInUse.isGranted;
    
    bool batteryOptimized = true;
    if (Platform.isAndroid) {
      batteryOptimized = await NativeBackgroundService.isBatteryOptimizationIgnored();
    }
    
    return notif && loc && batteryOptimized;
  }

  /// Verifica permisos individuales
  static Future<bool> hasNotificationPermission() async {
    return await Permission.notification.isGranted;
  }

  static Future<bool> hasLocationPermission() async {
    return await Permission.locationWhenInUse.isGranted;
  }

  static Future<bool> hasBatteryOptimizationExemption() async {
    if (!Platform.isAndroid) return true;
    return await NativeBackgroundService.isBatteryOptimizationIgnored();
  }

  /// M√©todo para solicitar permisos de ubicaci√≥n cuando sea necesario (al enviar alertas)
  static Future<bool> requestLocationPermissionForAlerts() async {
    print('üîê Requesting location permission for sending alerts...');
    
    try {
      final hasLocation = await hasLocationPermission();
      if (!hasLocation) {
        print('üîê Location permission needed for sending alerts...');
        final status = await Permission.locationWhenInUse.request();
        print('üìç Location permission status: $status');
        return status.isGranted;
      } else {
        print('üìç Location permission already granted');
        return true;
      }
    } catch (e) {
      print('‚ùå Error requesting location permission: $e');
      return false;
    }
  }

  /// M√©todos individuales para solicitar permisos (mantenidos para compatibilidad)
  static Future<void> requestNotificationPermission() async {
    await Permission.notification.request();
  }

  static Future<void> requestLocationPermission() async {
    await Permission.locationWhenInUse.request();
  }

  static Future<void> requestBatteryOptimizationExemption() async {
    if (Platform.isAndroid) {
      await NativeBackgroundService.requestBatteryOptimizationExemption();
    }
  }

  /// M√©todo para resetear el estado de primera ejecuci√≥n (√∫til para testing)
  static Future<void> resetFirstLaunchState() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_firstLaunchKey);
    print('üîÑ First launch state reset - permissions will be requested again');
  }

  /// M√©todo legacy mantenido para compatibilidad
  static Future<void> requestBasicPermissions() async {
    await requestAllPermissionsOnFirstLaunch();
  }

  /// M√©todo legacy mantenido para compatibilidad
  static Future<bool> allGranted() async {
    return await allPermissionsGranted();
  }

  /// M√©todo legacy mantenido para compatibilidad
  static Future<bool> requestAllPermissions() async {
    try {
      await requestAllPermissionsOnFirstLaunch();
      final allGranted = await allPermissionsGranted();
      
      if (allGranted) {
        print('‚úÖ All permissions granted successfully');
        return true;
      } else {
        print('‚ö†Ô∏è Some permissions were denied');
        return false;
      }
    } catch (e) {
      print('‚ùå Error requesting permissions: $e');
      return false;
    }
  }

  /// M√©todo para solicitar permisos faltantes espec√≠ficos
  static Future<void> requestMissingPermissions() async {
    print('üîê Checking and requesting missing permissions...');
    
    try {
      final hasNotification = await hasNotificationPermission();
      if (!hasNotification) {
        print('üîê Requesting missing notification permission...');
        await Permission.notification.request();
      }
      
      if (Platform.isAndroid) {
        final hasBatteryOptimization = await hasBatteryOptimizationExemption();
        if (!hasBatteryOptimization) {
          print('üîê Requesting missing battery optimization exemption...');
          try {
            await NativeBackgroundService.requestBatteryOptimizationExemption();
          } catch (e) {
            print('‚ö†Ô∏è Battery optimization request failed: $e');
          }
        }
      }
      
      print('‚úÖ Missing permissions requested');
    } catch (e) {
      print('‚ùå Error requesting missing permissions: $e');
    }
  }

  /// M√©todo espec√≠fico para solicitar optimizaci√≥n de bater√≠a
  static Future<void> requestBatteryOptimizationOnly() async {
    if (!Platform.isAndroid) return;
    
    print('üîê Requesting battery optimization exemption only...');
    try {
      await NativeBackgroundService.requestBatteryOptimizationExemption();
      print('üîã Battery optimization exemption requested successfully');
    } catch (e) {
      print('‚ö†Ô∏è Battery optimization request failed: $e');
    }
  }

  /// M√©todo para solicitar optimizaci√≥n de bater√≠a cuando el usuario interact√∫e
  static Future<void> requestBatteryOptimizationOnInteraction() async {
    if (!Platform.isAndroid) return;
    
    print('üîê User interaction detected - requesting battery optimization...');
    try {
      await NativeBackgroundService.requestBatteryOptimizationExemption();
      print('üîã Battery optimization exemption requested on interaction');
    } catch (e) {
      print('‚ö†Ô∏è Battery optimization request failed: $e');
    }
  }

  /// M√©todo para forzar la solicitud de todos los permisos (√∫til para testing)
  static Future<void> forceRequestAllPermissions() async {
    print('üîê Force requesting all permissions...');
    
    try {
      await resetFirstLaunchState();
      await requestAllPermissionsOnFirstLaunch();
      print('‚úÖ All permissions force requested');
    } catch (e) {
      print('‚ùå Error force requesting permissions: $e');
    }
  }
}
